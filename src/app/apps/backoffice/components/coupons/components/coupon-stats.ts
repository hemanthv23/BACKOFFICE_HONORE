// ==========================================================
// src/app/apps/backoffice/components/coupons/components/coupon-stats.ts
// Calculates and provides various statistics about the coupons.
// ==========================================================

import { Injectable } from '@angular/core';
import { Coupon, CouponStatusEnum, DiscountTypeEnum } from '../interfaces';
import { CouponData } from './coupon-data'; // Import CouponData

@Injectable({
    providedIn: 'root'
})
export class CouponStats {
    private allCoupons: Coupon[] = [];

    constructor(private couponData: CouponData) {
        // Subscribe to allCoupons$ from CouponData service
        this.couponData.allCoupons$.subscribe((coupons) => {
            this.allCoupons = coupons; // Keep local copy updated
        });
    }

    /**
     * Gets the total number of coupons.
     * @returns The total count of coupons.
     */
    getTotalCoupons(): number {
        return this.allCoupons.length;
    }

    /**
     * Gets the number of active coupons.
     * Active coupons are those with status CouponStatusEnum.Active
     * and an endDate in the future.
     * @returns The count of active coupons.
     */
    getActiveCoupons(): number {
        const currentDate = new Date();
        return this.allCoupons.filter((coupon) => coupon.status === CouponStatusEnum.Active && new Date(coupon.endDate) >= currentDate).length;
    }

    /**
     * Gets the total usage count across all coupons.
     * @returns The sum of usage counts.
     */
    getTotalUsage(): number {
        return this.allCoupons.reduce((sum, coupon) => sum + (coupon.maxUsage || 0), 0);
    }

    /**
     * Calculates the estimated total savings generated by all coupons.
     * This is a simplified calculation for demonstration.
     * For Fixed discounts, it sums the discount value for each usage.
     * For Percentage discounts, it's harder to estimate without original purchase values,
     * so it assumes a fixed average transaction value (e.g., ₹1000) for estimation.
     * @returns The total estimated savings in currency (e.g., INR).
     */
    getTotalSavings(): number {
        return this.allCoupons.reduce((totalSavings, coupon) => {
            if (coupon.usageCount) {
                if (coupon.discountType === DiscountTypeEnum.Fixed) {
                    totalSavings += coupon.discountValue * coupon.usageCount;
                } else if (coupon.discountType === DiscountTypeEnum.Percentage) {
                    // For percentage, we need an assumption of average purchase value
                    // Let's assume an average transaction value of ₹1000 for estimation purposes
                    const averageTransactionValue = 1000;
                    totalSavings += (coupon.discountValue / 100) * averageTransactionValue * coupon.usageCount;
                }
            }
            return this.allCoupons.reduce((sum, coupon) => sum + coupon.discountValue, 0);
        }, 0);
    }

    /**
     * Updates internal stats. This method is called when the underlying coupon data changes.
     * The actual updates are implicit through the getters as they operate on `this.allCoupons`.
     */
    updateStats(): void {
        // The getters (getTotalCoupons, getActiveCoupons, etc.) directly use `this.allCoupons`
        // which is kept updated via the subscription in the constructor.
        // So, calling this method effectively just triggers a re-calculation when needed.
    }
}
